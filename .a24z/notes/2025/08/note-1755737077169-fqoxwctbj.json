{
  "note": "# a24z-Memory MCP Tools Overview\n\n## Available Tools\n\n### 🔍 AskA24zMemoryTool\n**Purpose**: Query the a24z memory system for contextual guidance and tribal knowledge\n**Key Features**:\n- Semantic search across stored notes\n- Filter by tags and note types\n- Context-aware responses based on file paths\n- Supports decision, pattern, gotcha, and explanation note types\n\n**Usage**: Ask questions about specific files or general topics, optionally filtering by tags like `mcp`, `tools`, `architecture`\n\n### 📝 RepositoryNoteTool\n**Purpose**: Store tribal knowledge and notes in the `.a24z` directory\n**Key Features**:\n- Create notes with semantic tags\n- Associate notes with specific file/directory paths\n- Support for different note types (decision, pattern, gotcha, explanation)\n- Automatic repository detection and isolation\n\n**Usage**: Document architectural decisions, patterns, gotchas, and explanations with proper tagging\n\n### 🏷️ GetRepositoryTagsTool\n**Purpose**: Discover available tags for categorizing notes\n**Key Features**:\n- Shows repository-specific tags\n- Includes used tags from existing notes\n- Suggests relevant tags based on file paths\n- Provides repository-specific guidance\n\n**Usage**: Get tag suggestions before creating notes to ensure proper categorization\n\n### 📚 GetRepositoryGuidanceTool\n**Purpose**: Retrieve repository-specific note creation guidelines\n**Key Features**:\n- Access to `.a24z/note-guidance.md` if it exists\n- Falls back to default guidance if custom guidance isn't available\n- Helps maintain consistency in note creation\n\n**Usage**: Understand how to write effective notes for the current repository\n\n### 📋 CopyGuidanceTemplateTool\n**Purpose**: Set up note creation templates for new repositories\n**Key Features**:\n- Copy predefined templates (default, react-typescript, nodejs-api, python-data-science)\n- Create `.a24z` directory structure\n- Set up consistent note creation patterns\n\n**Usage**: Initialize new repositories with proper note-taking infrastructure\n\n## Tool Architecture\n\nAll tools inherit from `BaseTool` which provides:\n- Common validation patterns\n- Schema conversion from Zod to JSON Schema\n- MCP protocol integration\n- Error handling and response formatting\n\n## System Architecture Diagram\n\n```mermaid\ngraph TB\n    subgraph \"MCP Client\"\n        Client[Client Application]\n    end\n    \n    subgraph \"a24z-Memory MCP Server\"\n        Server[MCP Server]\n        Router[Request Router]\n        \n        subgraph \"Tools Layer\"\n            AskTool[AskA24zMemoryTool]\n            NoteTool[RepositoryNoteTool]\n            TagsTool[GetRepositoryTagsTool]\n            GuidanceTool[GetRepositoryGuidanceTool]\n            TemplateTool[CopyGuidanceTemplateTool]\n        end\n        \n        subgraph \"Core Layer\"\n            BaseTool[BaseTool Class]\n            SchemaConverter[Zod to JSON Schema]\n            PathNormalizer[Path Normalization]\n        end\n        \n        subgraph \"Storage Layer\"\n            NotesStore[Notes Store]\n            FileSystem[File System Operations]\n        end\n    end\n    \n    subgraph \"Repository\"\n        A24zDir[.a24z Directory]\n        NotesJSON[notes.json]\n        GuidanceMD[note-guidance.md]\n        Templates[Templates]\n    end\n    \n    Client --> Server\n    Server --> Router\n    Router --> AskTool\n    Router --> NoteTool\n    Router --> TagsTool\n    Router --> GuidanceTool\n    Router --> TemplateTool\n    \n    AskTool --> BaseTool\n    NoteTool --> BaseTool\n    TagsTool --> BaseTool\n    GuidanceTool --> BaseTool\n    TemplateTool --> BaseTool\n    \n    BaseTool --> SchemaConverter\n    BaseTool --> PathNormalizer\n    \n    AskTool --> NotesStore\n    NoteTool --> NotesStore\n    TagsTool --> NotesStore\n    GuidanceTool --> NotesStore\n    TemplateTool --> NotesStore\n    \n    NotesStore --> FileSystem\n    FileSystem --> A24zDir\n    A24zDir --> NotesJSON\n    A24zDir --> GuidanceMD\n    A24zDir --> Templates\n```\n\n## Data Flow Diagram\n\n```mermaid\nsequenceDiagram\n    participant Client as MCP Client\n    participant Server as MCP Server\n    participant Tool as Tool Instance\n    participant Store as Notes Store\n    participant FS as File System\n    \n    Client->>Server: Tool Request\n    Server->>Tool: Route Request\n    Tool->>Tool: Validate Input Schema\n    Tool->>Tool: Execute Logic\n    \n    alt Create/Update Note\n        Tool->>Store: Store Note\n        Store->>FS: Write to .a24z/notes.json\n        FS-->>Store: Write Confirmation\n        Store-->>Tool: Success Response\n    else Query Notes\n        Tool->>Store: Query Notes\n        Store->>FS: Read from .a24z/notes.json\n        FS-->>Store: Note Data\n        Store-->>Tool: Filtered Results\n    else Get Tags/Guidance\n        Tool->>Store: Get Repository Info\n        Store->>FS: Read .a24z Directory\n        FS-->>Store: Directory Contents\n        Store-->>Tool: Available Tags/Guidance\n    end\n    \n    Tool-->>Server: Tool Response\n    Server-->>Client: MCP Response\n```\n\n## Tool Inheritance Hierarchy\n\n```mermaid\nclassDiagram\n    class BaseTool {\n        +inputSchema: ZodSchema\n        +description: string\n        +execute(input): Promise\n        +validateInput(input): boolean\n        +convertSchema(): JSONSchema\n    }\n    \n    class AskA24zMemoryTool {\n        +query: string\n        +filePath: string\n        +filterTags: string[]\n        +filterTypes: string[]\n        +execute(): Promise\n    }\n    \n    class RepositoryNoteTool {\n        +note: string\n        +directoryPath: string\n        +anchors: string[]\n        +tags: string[]\n        +type: string\n        +execute(): Promise\n    }\n    \n    class GetRepositoryTagsTool {\n        +path: string\n        +includeUsedTags: boolean\n        +includeSuggestedTags: boolean\n        +includeGuidance: boolean\n        +execute(): Promise\n    }\n    \n    class GetRepositoryGuidanceTool {\n        +path: string\n        +execute(): Promise\n    }\n    \n    class CopyGuidanceTemplateTool {\n        +path: string\n        +template: string\n        +overwrite: boolean\n        +execute(): Promise\n    }\n    \n    BaseTool <|-- AskA24zMemoryTool\n    BaseTool <|-- RepositoryNoteTool\n    BaseTool <|-- GetRepositoryTagsTool\n    BaseTool <|-- GetRepositoryGuidanceTool\n    BaseTool <|-- CopyGuidanceTemplateTool\n```\n\n## Repository Storage Structure\n\n```mermaid\ngraph LR\n    subgraph \"Repository Root\"\n        Root[Project Directory]\n    end\n    \n    subgraph \".a24z Directory\"\n        A24z[.a24z/]\n        Notes[notes.json]\n        Guidance[note-guidance.md]\n    end\n    \n    subgraph \"Templates\"\n        Default[default-note-guidance.md]\n        React[react-typescript-note-guidance.md]\n        NodeJS[nodejs-api-note-guidance.md]\n        Python[python-data-science-note-guidance.md]\n    end\n    \n    Root --> A24z\n    A24z --> Notes\n    A24z --> Guidance\n    \n    A24z --> Default\n    A24z --> React\n    A24z --> NodeJS\n    A24z --> Python\n    \n    Notes --> |Contains| NoteData[Note Objects with: id, note, anchors, tags, type, metadata]\n    Guidance --> |Contains| GuidanceContent[Repository-specific note creation guidelines]\n```\n\n## Integration with MCP Server\n\nThese tools are exposed through the MCP server at `src/core-mcp/server/` and can be called by any MCP client. The server handles:\n- Tool registration and schema exposure\n- Request routing and validation\n- Response formatting according to MCP protocol\n\n## Storage Strategy\n\nNotes are stored in `.a24z` directories with:\n- `notes.json` for structured note data\n- `note-guidance.md` for repository-specific guidelines\n- Repository isolation through path normalization\n- JSON format for structured data, Markdown for guidance\n\n---\n\n*This note was created using the a24z-Memory system and displayed through Principal-MD, demonstrating the integration between these two powerful tools!*",
  "anchors": ["src/core-mcp/tools/", "src/core-mcp/server/", "src/core-mcp/store/"],
  "tags": ["tools", "mcp", "architecture", "overview", "integration", "diagrams"],
  "confidence": "medium",
  "type": "explanation",
  "metadata": {
    "toolVersion": "2.0.0",
    "createdBy": "create_repository_note_tool"
  },
  "id": "note-1755737077169-fqoxwctbj",
  "timestamp": 1755737077169
}
