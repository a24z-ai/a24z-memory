{
  "note": "## Path Normalization and Repository Isolation\n\nThe a24z-memory tool uses sophisticated path normalization to ensure notes are properly isolated by repository and stored with consistent relative paths.\n\n**Key challenges**:\n- **Repository detection**: Finding the actual git repository root from any subdirectory\n- **Path consistency**: Converting absolute paths to repository-relative paths\n- **Cross-platform compatibility**: Handling different path separators and formats\n\n**How it works**:\n1. **Repository root detection**: Walks up the directory tree looking for `.git` folder\n2. **Path normalization**: Converts all paths to be relative to the repository root\n3. **Anchor processing**: Handles both absolute and relative anchor paths correctly\n\n**Path handling examples**:\n```typescript\n// Input: /Users/user/projects/my-repo/src/file.ts\n// Output: src/file.ts (relative to repo root)\n\n// Input: ./src/file.ts (from /Users/user/projects/my-repo)\n// Output: src/file.ts (resolved and made relative)\n```\n\n**Benefits**:\n- **Portable notes**: Notes work regardless of where the repository is cloned\n- **Consistent storage**: All paths are stored relative to repo root\n- **Git-friendly**: Paths work correctly with git operations\n\n**Files involved**:\n- `src/core-mcp/utils/pathNormalization.ts` - Core path logic\n- `src/core-mcp/store/notesStore.ts` - Uses normalization for storage\n\n**Tags**: path-handling, repository-isolation, storage, decision",
  "directoryPath": "/Users/griever/Developer/a24z-Memory",
  "anchors": ["src/core-mcp/utils/pathNormalization.ts", "src/core-mcp/store/notesStore.ts"],
  "tags": ["core-concept"],
  "confidence": "high",
  "type": "explanation",
  "metadata": {
    "toolVersion": "2.0.0",
    "createdBy": "create_repository_note_tool"
  },
  "id": "note-1755662078509-75ohqvub3",
  "timestamp": 1755662078509
}
