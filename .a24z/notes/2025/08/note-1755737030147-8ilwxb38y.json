{
  "note": "# a24z-Memory MCP Tools Overview\n\n## Available Tools\n\n### üîç AskA24zMemoryTool\n**Purpose**: Query the a24z memory system for contextual guidance and tribal knowledge\n**Key Features**:\n- Semantic search across stored notes\n- Filter by tags and note types\n- Context-aware responses based on file paths\n- Supports decision, pattern, gotcha, and explanation note types\n\n**Usage**: Ask questions about specific files or general topics, optionally filtering by tags like `mcp`, `tools`, `architecture`\n\n### üìù RepositoryNoteTool\n**Purpose**: Store tribal knowledge and notes in the `.a24z` directory\n**Key Features**:\n- Create notes with semantic tags\n- Associate notes with specific file/directory paths\n- Support for different note types (decision, pattern, gotcha, explanation)\n- Automatic repository detection and isolation\n\n**Usage**: Document architectural decisions, patterns, gotchas, and explanations with proper tagging\n\n### üè∑Ô∏è GetRepositoryTagsTool\n**Purpose**: Discover available tags for categorizing notes\n**Key Features**:\n- Shows repository-specific tags\n- Includes used tags from existing notes\n- Suggests relevant tags based on file paths\n- Provides repository-specific guidance\n\n**Usage**: Get tag suggestions before creating notes to ensure proper categorization\n\n### üìö GetRepositoryGuidanceTool\n**Purpose**: Retrieve repository-specific note creation guidelines\n**Key Features**:\n- Access to `.a24z/note-guidance.md` if it exists\n- Falls back to default guidance if custom guidance isn't available\n- Helps maintain consistency in note creation\n\n**Usage**: Understand how to write effective notes for the current repository\n\n### üìã CopyGuidanceTemplateTool\n**Purpose**: Set up note creation templates for new repositories\n**Key Features**:\n- Copy predefined templates (default, react-typescript, nodejs-api, python-data-science)\n- Create `.a24z` directory structure\n- Set up consistent note creation patterns\n\n**Usage**: Initialize new repositories with proper note-taking infrastructure\n\n## Tool Architecture\n\nAll tools inherit from `BaseTool` which provides:\n- Common validation patterns\n- Schema conversion from Zod to JSON Schema\n- MCP protocol integration\n- Error handling and response formatting\n\n## Integration with MCP Server\n\nThese tools are exposed through the MCP server at `src/core-mcp/server/` and can be called by any MCP client. The server handles:\n- Tool registration and schema exposure\n- Request routing and validation\n- Response formatting according to MCP protocol\n\n## Storage Strategy\n\nNotes are stored in `.a24z` directories with:\n- `notes.json` for structured note data\n- `note-guidance.md` for repository-specific guidelines\n- Repository isolation through path normalization\n- JSON format for structured data, Markdown for guidance\n\n**Tags**: tools, mcp, architecture, storage, integration",
  "anchors": ["src/core-mcp/tools/", "src/core-mcp/server/", "src/core-mcp/store/"],
  "tags": ["tools", "mcp", "architecture", "overview", "integration"],
  "confidence": "medium",
  "type": "explanation",
  "metadata": {
    "toolVersion": "2.0.0",
    "createdBy": "create_repository_note_tool"
  },
  "id": "note-1755737030147-8ilwxb38y",
  "timestamp": 1755737030147
}
