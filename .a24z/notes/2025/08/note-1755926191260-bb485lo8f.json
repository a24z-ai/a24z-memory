{
  "note": "## a24z-Memory Core Architecture\n\na24z-Memory implements a **Layered Knowledge Architecture** with four distinct layers:\n\n### 1. Tag Layer\n- Semantic categories for discovery (bug, pattern, decision, explanation)\n- Enables quick filtering and categorization\n- Tags are customizable per repository\n\n### 2. Note Layer  \n- Actual insights, explanations, and tribal knowledge\n- Markdown format with code blocks and formatting\n- Each note has confidence levels (high/medium/low)\n- Notes are typed (decision, pattern, gotcha, explanation)\n\n### 3. Anchor Layer\n- File/directory paths that connect notes to actual code\n- Ensures knowledge stays relevant as code evolves\n- Multiple anchors per note for cross-referencing\n- Anchors are validated for staleness\n\n### 4. Git Layer\n- Distribution mechanism for team knowledge\n- History shows how understanding accumulated\n- Notes stored in `.a24z/` directory in repository\n- JSON storage with year/month organization\n\n### Key Design Principles\n\n**Retrieval-Oriented**: Unlike traditional RAG that embeds content, we anchor knowledge to code locations. Context stays fresh because we read current file state.\n\n**Knowledge Doesn't Rot**: Anchors ensure notes remain relevant to actual code, with stale anchor detection.\n\n**MCP Protocol**: Built on Model Context Protocol for AI integration with Cursor, Windsurf, Claude Code, VS Code.\n\n**Repository-Specific**: Each repository has its own knowledge base, configuration, and guidance.",
  "anchors": ["src/core-mcp", "README.md", "src/core-mcp/store/notesStore.ts"],
  "tags": ["architecture", "core-concepts", "documentation"],
  "confidence": "high",
  "type": "explanation",
  "metadata": {
    "toolVersion": "2.0.0",
    "createdBy": "create_repository_note_tool"
  },
  "id": "note-1755926191260-bb485lo8f",
  "timestamp": 1755926191260
}
